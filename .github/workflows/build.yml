name: Auto Build and Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  FLUTTER_VERSION: '3.29.3'
  KOTLIN_VERSION: '1.8.22'
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Fix Kotlin Configuration
        run: |
          # 确保在android/build.gradle中正确定义kotlin_version
          if ! grep -q "ext.kotlin_version" android/build.gradle; then
            sed -i '/buildscript {/a ext.kotlin_version = '\''${{ env.KOTLIN_VERSION }}'\''' android/build.gradle
          else
            sed -i "s/ext.kotlin_version = .*/ext.kotlin_version = '${{ env.KOTLIN_VERSION }}'/" android/build.gradle
          fi

          # 确保插件版本一致
          sed -i "s/id 'org.jetbrains.kotlin.android' version .*/id 'org.jetbrains.kotlin.android' version '${{ env.KOTLIN_VERSION }}' apply false/" android/build.gradle

          # 打印验证
          echo "=== Modified build.gradle ==="
          cat android/build.gradle | grep -A 2 "ext.kotlin_version"
          cat android/build.gradle | grep "org.jetbrains.kotlin.android"

      - name: Verify Environment
        run: |
          java -version
          flutter --version
          flutter doctor -v

      - name: Decode signing key
        run: |
          echo "${{ secrets.KEYSTORE_FILE_BASE64 }}" | base64 --decode > android/app/key.jks
          chmod 400 android/app/key.jks

      - name: Get package version
        id: package_version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: Build Release APKs
        run: |
          # 先清理构建缓存
          flutter clean
          
          # 构建通用APK
          flutter build apk --release --no-tree-shake-icons
          
          # 构建分架构APK
          flutter build apk --split-per-abi --release --no-tree-shake-icons

      - name: Prepare Artifacts
        run: |
          BUILD_DIR="build/app/outputs/apk"
          mkdir -p artifacts
          
          # 通用APK
          cp "$BUILD_DIR/release/app-release.apk" "artifacts/frp-for-android-${{ steps.package_version.outputs.version }}-universal.apk"
          
          # 分架构APK
          for abi in arm64-v8a armeabi-v7a x86_64; do
            if [ -f "$BUILD_DIR/release/app-$abi-release.apk" ]; then
              cp "$BUILD_DIR/release/app-$abi-release.apk" "artifacts/frp-for-android-${{ steps.package_version.outputs.version }}-$abi.apk"
            fi
          done
          
          echo "APK_FILES=artifacts/frp-for-android-${{ steps.package_version.outputs.version }}-*.apk" >> $GITHUB_ENV
          ls -la artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.package_version.outputs.version }}"
          name: "frp-for-android v${{ steps.package_version.outputs.version }}"
          body: |
            ### 包含架构:
            - arm64-v8a (推荐主流设备)
            - armeabi-v7a (旧款ARM设备)
            - x86_64 (模拟器/Chromebook)
            - 通用APK (兼容所有设备)
            
            ### 构建信息:
            - Flutter版本: ${{ env.FLUTTER_VERSION }}
            - Kotlin版本: ${{ env.KOTLIN_VERSION }}
            - Java版本: 17
            - 构建时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          files: ${{ env.APK_FILES }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

      - name: Cleanup
        run: |
          rm -f android/app/key.jks
          flutter clean
